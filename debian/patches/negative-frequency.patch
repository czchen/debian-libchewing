Description: Fix negative frequency problem
---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: upstream, https://github.com/chewing/libchewing/issues/75
Bug: https://github.com/chewing/libchewing/issues/75
Bug-Debian: http://bugs.debian.org/722971

--- libchewing-0.3.5.orig/include/internal/memory-private.h
+++ libchewing-0.3.5/include/internal/memory-private.h
@@ -22,62 +22,66 @@
 #define inline __inline
 #endif
 
-static inline uint16_t GetUint16( const char *ptr )
+static inline uint16_t GetUint16( const void *ptr )
 {
 	uint16_t val;
+	const unsigned char *uptr = ptr;
 #if WORDS_BIGENDIAN
 	val =
-		( ptr[0] << 8 ) |
-		( ptr[1] << 0 );
+		( uptr[0] << 8 ) |
+		( uptr[1] << 0 );
 #else
 	val =
-		( ptr[0] << 0 ) |
-		( ptr[1] << 8 );
+		( uptr[0] << 0 ) |
+		( uptr[1] << 8 );
 #endif
 	return val;
 }
 
-static inline void PutUint16( uint16_t val, char *ptr )
+static inline void PutUint16( uint16_t val, void *ptr )
 {
+	unsigned char *uptr = (unsigned char *) ptr;
 #if WORDS_BIGENDIAN
-	ptr[0] = ( val >> 8 ) & 0xff;
-	ptr[1] = ( val >> 0 ) & 0xff;
+	uptr[0] = ( val >> 8 ) & 0xff;
+	uptr[1] = ( val >> 0 ) & 0xff;
 #else
-	ptr[0] = ( val >> 0 ) & 0xff;
-	ptr[1] = ( val >> 8 ) & 0xff;
+	uptr[0] = ( val >> 0 ) & 0xff;
+	uptr[1] = ( val >> 8 ) & 0xff;
 #endif
 }
 
-static inline int GetInt32( const char *ptr )
+static inline int GetInt32( const void *ptr )
 {
 	int val;
+	const unsigned char *uptr = ptr;
 #if WORDS_BIGENDIAN
 	val =
-		( ptr[0] << 24 ) |
-		( ptr[1] << 16 ) |
-		( ptr[2] <<  8 ) |
-		( ptr[3] <<  0 );
+		( uptr[0] << 24 ) |
+		( uptr[1] << 16 ) |
+		( uptr[2] <<  8 ) |
+		( uptr[3] <<  0 );
 #else
 	val =
-		( ptr[0] <<  0 ) |
-		( ptr[1] <<  8 ) |
-		( ptr[2] << 16 ) |
-		( ptr[3] << 24 );
+		( uptr[0] <<  0 ) |
+		( uptr[1] <<  8 ) |
+		( uptr[2] << 16 ) |
+		( uptr[3] << 24 );
 #endif
 	return val;
 }
 
-static inline void PutInt32( int val, char *ptr )
+static inline void PutInt32( int val, void *ptr )
 {
+	unsigned char *uptr = (unsigned char *) ptr;
 #if WORDS_BIGENDIAN
-	ptr[0] = ( val >> 24 ) & 0xff;
-	ptr[1] = ( val >> 16 ) & 0xff;
-	ptr[2] = ( val >>  8 ) & 0xff;
-	ptr[3] = ( val >>  0 ) & 0xff;
+	uptr[0] = ( val >> 24 ) & 0xff;
+	uptr[1] = ( val >> 16 ) & 0xff;
+	uptr[2] = ( val >>  8 ) & 0xff;
+	uptr[3] = ( val >>  0 ) & 0xff;
 #else
-	ptr[0] = ( val >>  0 ) & 0xff;
-	ptr[1] = ( val >>  8 ) & 0xff;
-	ptr[2] = ( val >> 16 ) & 0xff;
-	ptr[3] = ( val >> 24 ) & 0xff;
+	uptr[0] = ( val >>  0 ) & 0xff;
+	uptr[1] = ( val >>  8 ) & 0xff;
+	uptr[2] = ( val >> 16 ) & 0xff;
+	uptr[3] = ( val >> 24 ) & 0xff;
 #endif
 }
